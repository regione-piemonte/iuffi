<?xml version="1.0" encoding="UTF-8"?>
<project name="iuffiweb" xmlns:ivy="antlib:fr.jayasoft.ivy.ant" default="distribution">
	<description>Build file per componente IUFFIWEB (Prodotto IUFFI)</description>

	<property environment="env" />

	<target name="resolve-dependencies" description="carica le librerie dal repository remoto">
		<ivy:configure file="buildfiles/ivyconf.xml" />
		<ivy:resolve file="buildfiles/ivy.xml" />
	</target>

	<target name="load-dependencies" depends="resolve-dependencies, clean-lib" description="Risolve le dipendenze esterne.">
		<ivy:retrieve pattern="lib/[artifact].[type]" />
	</target>

	<target name="load-properties">
		<echo message="Loading build properties..." />
		<property file="buildfiles/build.properties" />
		<tstamp />
		<!-- Se non Ã¨ stato indicato il target si imposta di default tst-rp-01 -->
		<condition property="target" value="tst-rp-01">
			<not>
				<isset property="target" />
			</not>
		</condition>
		<loadproperties srcFile="buildfiles/${target}.properties" />
	</target>

	<target name="init" depends="load-properties">
		<path id="ref.classpath">
			<fileset dir="${dir.lib}" includes="*.jar" />
		</path>
		<mkdir dir="${dir.build}" />
	</target>

	<target name="distribution">
		<echo message="Eseguo target 'distribution'"/>
		<antcall target="clean-all" />
		<antcall target="package-all" />
		<tstamp />
	</target>

	<target name="java-environment" depends="init">
		<delete dir="${dir.classes}" />
		<mkdir dir="${dir.classes}" />
		<delete dir="${dir.temp.src}" />
		<mkdir dir="${dir.temp.src}" />
		<copy todir="${dir.temp.src}">
			<fileset dir="${dir.src.java}" includes="**/*.java" />
		</copy>
    <replaceregexp encoding="iso8859-15" match="WEB_CONTEXT(.)*=(.)*" replace="WEB_CONTEXT = &quot;${context.root}&quot;;" flags="im" byline="false" file="${dir.temp.src}/it/csi/iuffi/iuffiweb/util/IuffiConstants.java" />
    <!--Copio i file di properties -->
		<copy todir="${dir.classes}">
			<fileset dir="${dir.conf.application}" includes="*.properties" />
		</copy>
    <!-- e rimpiazzo i valori -->
		<replaceregexp match="(\\b)*papuaserv.profilazione.rest.baseurl(.)+" replace="papuaserv.profilazione.rest.baseurl=${papuaserv.profilazione.rest.baseurl}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		<replaceregexp match="(\\b)*papuaserv.messaggistica.wsdl.server(.)+" replace="papuaserv.messaggistica.wsdl.server=${papuaserv.messaggistica.wsdl.server}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		
		<replaceregexp match="(\\b)*avivws.iuffi.rest.baseurl(.)+" replace="avivws.iuffi.rest.baseurl=${avivws.iuffi.rest.baseurl}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		<replaceregexp match="(\\b)*avivws.iuffi.rest.username(.)+" replace="avivws.iuffi.rest.username=${avivws.iuffi.rest.username}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		<replaceregexp match="(\\b)*avivws.iuffi.rest.password(.)+" replace="avivws.iuffi.rest.password=${avivws.iuffi.rest.password}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		<replaceregexp match="(\\b)*avivws.iuffi.rest.baseurl(.)+" replace="avivws.iuffi.rest.baseurl=${avivws.iuffi.rest.baseurl}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="avivws.properties" />
		</replaceregexp>
		<replaceregexp match="(\\b)*avivws.iuffi.rest.username(.)+" replace="avivws.iuffi.rest.username=${avivws.iuffi.rest.username}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="avivws.properties" />
		</replaceregexp>
		<replaceregexp match="(\\b)*avivws.iuffi.rest.password(.)+" replace="avivws.iuffi.rest.password=${avivws.iuffi.rest.password}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="avivws.properties" />
		</replaceregexp>
    <replaceregexp match="(\\b)*jasper.baseurl(.)+" replace="jasper.baseurl=${jasper.baseurl}" flags="m" byline="true">
      <fileset dir="${dir.classes}" includes="config.properties" />
    </replaceregexp>
		
		<fail unless="siapcomm.wsdl" />
		<replaceregexp match="(\\b)*siapcomm.wsdl(.)+" replace="siapcomm.wsdl=${siapcomm.wsdl}" flags="m" byline="true">
		  <fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		<!-- SIAPPAGOPA -->
		<fail unless="agripagopa.wsdl" />
		    <replaceregexp match="(\\b)*agripagopa.wsdl(.)+" replace="agripagopa.wsdl=${agripagopa.wsdl}" flags="m" byline="true">
		      <fileset dir="${dir.classes}" includes="config.properties" />
		    </replaceregexp>
		
		<fail unless="siappagopa.link" />
		    <replaceregexp match="(\\b)*siappagopa.link(.)+" replace="siappagopa.link=${siappagopa.link}" flags="m" byline="true">
		      <fileset dir="${dir.classes}" includes="config.properties" />
		    </replaceregexp>
		
		 <fail unless="siappagopa.pageSpidUrlAnnulla" />
		        <replaceregexp match="(\\b)*siappagopa.pageSpidUrlAnnulla(.)+" replace="siappagopa.pageSpidUrlAnnulla=${siappagopa.pageSpidUrlAnnulla}" flags="m" byline="true">
		          <fileset dir="${dir.classes}" includes="config.properties" />
		        </replaceregexp>
		
		<fail unless="siappagopa.pageUrlAnnulla" />
		    <replaceregexp match="(\\b)*siappagopa.pageUrlAnnulla(.)+" replace="siappagopa.pageUrlAnnulla=${siappagopa.pageUrlAnnulla}" flags="m" byline="true">
		      <fileset dir="${dir.classes}" includes="config.properties" />
		    </replaceregexp>
		
		<fail unless="siappagopa.pageSpidReferral" />
		        <replaceregexp match="(\\b)*siappagopa.pageSpidReferral(.)+" replace="siappagopa.pageSpidReferral=${siappagopa.pageSpidReferral}" flags="m" byline="true">
		          <fileset dir="${dir.classes}" includes="config.properties" />
		        </replaceregexp>
		
		<fail unless="siappagopa.spidLink" />
		    <replaceregexp match="(\\b)*siappagopa.spidLink(.)+" replace="siappagopa.spidLink=${siappagopa.spidLink}" flags="m" byline="true">
		      <fileset dir="${dir.classes}" includes="config.properties" />
		    </replaceregexp>
		
		<fail unless="siappagopa.pageReferral" />
		    <replaceregexp match="(\\b)*siappagopa.pageReferral(.)+" replace="siappagopa.pageReferral=${siappagopa.pageReferral}" flags="m" byline="true">
		      <fileset dir="${dir.classes}" includes="config.properties" />
		    </replaceregexp>
		
		
				
		<fail unless="modolxp.endpoint" />
		<replaceregexp match="(\\b)*modolxp.endpoint(.)+" replace="modolxp.endpoint=${modolxp.endpoint}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>	
		
		<fail unless="modolxp.port" />
		<replaceregexp match="(\\b)*modolxp.port(.)+" replace="modolxp.port=${modolxp.port}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		
		<replaceregexp match="(\\b)*iuffi.gestione.servers(.)+" replace="iuffi.gestione.servers=${iuffi.gestione.servers}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		
		<replaceregexp match="(\\b)*mapservice.baseurl(.)+" replace="mapservice.baseurl=${mapservice.baseurl}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		
		<!--Copio le PD-->
		<copy todir="${dir.classes}">
			<fileset dir="${dir.conf.application}" includes="*.wsdl" />
		</copy>
		<!--Copio i WSDL -->
		<copy todir="${dir.classes}">
			<fileset dir="${dir.conf.application}" includes="*-client*.xml" />
		</copy>
		<!--Copio i file di spring-->
		<copy todir="${dir.classes}">
			<fileset dir="${dir.conf.ejb}/${app.componente}/" includes="beanRefContext.xml,springContext.xml" />
		</copy>
		<!--Rimpiazzo i puntamenti nelle PD-->
		<replaceregexp match="&lt;property name=&quot;java.naming.provider.url&quot; value=&quot;(.*)&quot; /&gt;" replace="&lt;property name=&quot;java.naming.provider.url&quot; value=&quot;${pd.smrgaasv.url}&quot; /&gt;" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="smrgaasv-client*.xml" />
		</replaceregexp>
		
		<replaceregexp match="&lt;property name=&quot;java.naming.provider.url&quot; value=&quot;(.*)&quot; /&gt;" replace="&lt;property name=&quot;java.naming.provider.url&quot; value=&quot;${pd.gaaserv.url}&quot; /&gt;" flags="m" byline="true">
				<fileset dir="${dir.classes}" includes="gaasrv-HL-client*.xml" />
			</replaceregexp>		
		<replaceregexp match="&lt;property name=&quot;java.naming.provider.url&quot; value=&quot;(.*)&quot; /&gt;" replace="&lt;property name=&quot;java.naming.provider.url&quot; value=&quot;${pd.agriwell.url}&quot; /&gt;" flags="m" byline="true">
		  <fileset dir="${dir.classes}" includes="agriwell-client-*.xml" />
		</replaceregexp>			
	
	</target>

	<target name="compile-all" depends="init, load-dependencies, java-environment" description="Compila i sorgenti nella build directory">
		<mkdir dir="${dir.classes}" />
		<javac srcdir="${dir.temp.src}" classpathref="ref.classpath" destdir="${dir.classes}" optimize="on" deprecation="on" fork="true" encoding="iso8859-15" memoryInitialSize="128m" memoryMaximumSize="512m">
		</javac>
	</target>

	<target name="web-environment">
		<echo>Copying web configuration files from ${dir.conf.webinf} to temporary directory ${dir.temp.webinf}</echo>
		<mkdir dir="${dir.temp.webinf}" />
		<copy todir="${dir.temp.webinf}">
			<fileset dir="${dir.conf.webinf}" includes="*.xml,*.tld,**/*.properties" />
		</copy>
		<mkdir dir="${dir.temp.webinf}/conf" />
		<copy todir="${dir.temp.webinf}/conf">
			<fileset dir="${dir.conf}" includes="**/*" />
		</copy>
		<replaceregexp match="(&lt;param-name&gt;remincl.resource.provider.portal&lt;/param-name&gt;[^&lt;]*&lt;param-value&gt;)[^&lt;]*(&lt;/param-value&gt;)" replace="\1${remincl.resource.provider.portal}\2" flags="s" byline="false" file="${file.temp.webxml}" />
	</target>

	<target name="package-war" depends="init, web-environment">
		<mkdir dir="${dir.archive.target}" />
		<echo>Creating web archive ${war.archive}</echo>
		<war basedir="${dir.src.web}" warfile="${war.archive}" excludes="**/*.class" webxml="${file.temp.webxml}">
			<webinf dir="${dir.temp.webinf}" excludes="/jsp/**,/include/**" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Target" value="${target}" />
				<attribute name="ComponentName" value="${app.componente}" />
				<attribute name="ComponentVersion" value="${app.version}" />
			</manifest>
		</war>
	</target>

	<target name="package-ejb" depends="compile-all, packageVersion">
		<echo>Creating ${ejb.archive}</echo>
		<jar basedir="${dir.classes}" includes="**/*.class,**/*.xml,**/*.properties,**/*.wsdl" destfile="${ejb.archive}" >
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Target" value="${target}" />
				<attribute name="ComponentName" value="${app.componente}" />
				<attribute name="ComponentVersion" value="${app.version}" />
			</manifest>
		</jar>
	</target>

	<target name="ear-environment">
		<echo>Copying ear configuration files from ${dir.conf}/ear to temporary directory ${dir.temp}</echo>
		<mkdir dir="${dir.temp}" />
		<copy todir="${dir.temp}">
			<fileset dir="${dir.conf}/ear" includes="application.xml" />
		</copy>
		<replaceregexp match="(&lt;context-root&gt;)[^&lt;]*(&lt;/context-root&gt;)" replace="\1${context.root}\2" flags="s" byline="false" file="${file.temp.applicationxml}" />
	</target>

	<target name="package-ear" depends="package-war, package-ejb, ear-environment" description="Costruisce l'ear per un ambiente">
		<ear appxml="${file.temp.applicationxml}" earfile="${ear.archive}">
			<fileset dir="${dir.archive.target}" includes="${war.name},${ejb.name}" />
			<zipfileset dir="${dir.lib}" excludes="${ear.lib.excludes}" prefix="lib">
			</zipfileset>
			<zipfileset dir="${dir.lib}" includes="${ear.lib.includes}" prefix="lib">
			</zipfileset>
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Target" value="${target}" />
				<attribute name="ComponentName" value="${app.componente}" />
				<attribute name="ComponentVersion" value="${app.version}" />
				<attribute name="Dependencies" value="com.oracle" />
			</manifest>
		</ear>
	</target>

	<target name="package-all" depends="package-ear" description="Ccrea tutti gli archivi per un ambiente">
		<delete dir="${dir.dist.target}" />
		<mkdir dir="${dir.dist.target}" />
		<tar destfile="${dir.dist.target}/${app.componente}-${app.version}.tar">
			<tarfileset dir="${dir.archive.target}" includes="${ear.name}" />
			<!-- tarfileset dir="${dir.conf.tar}" includes="*-ds.xml" / -->
		</tar>
	</target>

	<target name="clean-cache" depends="load-properties" description="Cancella la directory build/cache creata da Ivy con il download delle dipendenze">
		<echo>Deleting dir ${dir.cache}</echo>
		<delete dir="${dir.cache}" />
	</target>

	<target name="clean-temp" depends="load-properties" description="Cancella la directory build/temp creata da Ant">
		<echo>Deleting dir ${dir.temp}</echo>
		<delete dir="${dir.temp}" />
	</target>

	<target name="clean-classes" depends="load-properties" description="Cancella la directory build/classes creata da Ant contenente i file .class ottenuti dalla compilazione del sorgente Java">
		<delete dir="${dir.classes}" />
	</target>

	<target name="clean-archive" depends="load-properties" description="Cancella la directory build/dist creata da Ant contenente tutti gli archivi generati dai target">
		<delete dir="${dir.archive}" />
	</target>

	<target name="clean-dist" depends="load-properties">
		<delete dir="${dir.dist.target}" />
	</target>

	<target name="clean-lib" depends="load-properties">
		<delete dir="${dir.lib}" />
	</target>

	<target name="clean-all" depends="clean-temp, clean-cache, clean-lib, clean-classes, clean-archive, clean-dist" description="Cancella tutte le directory create da Ant ad eccezione della cache di Ivy" />

	<target name="packageVersion">
		<antversion property="antversion"/>
		<propertyfile file="${dir.classes}/version.properties">
		  <entry key="Ant-Version"   type="string"  value="${ant.version}" />
		  <entry key="Created-By"   type="string"  value="${java.version}" />
		  <entry key="Built-By"   type="string"  value="${user.name}" />
		  <entry key="Built-Date"    type="date" value="${DSTAMP}" />
		  <entry key="Target"    type="string" value="${target}" />
		  <entry key="ComponentName"    type="string" value="${app.componente}" />
		  <entry key="ComponentVersion"    type="string" value="${app.version}" />
		</propertyfile>
	</target>
</project>